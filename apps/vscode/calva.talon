title: /.* - Visual Studio Code$/
mode: user.clojure
mode: command 
and code.language: clojure
-

paredit switch: user.vscode("paredit.togglemode")

form next: user.vscode("paredit.forwardSexp")
form last: user.vscode("paredit.backwardSexp")
form next down: user.vscode("paredit.forwardDownSexp")
form last down: user.vscode("paredit.backwardDownSexp")
form next up: user.vscode("paredit.forwardUpSexp")
form last up: user.vscode("paredit.backwardUpSexp")

take form next: user.vscode("paredit.selectForwardSexp")
take form last: user.vscode("paredit.selectBackwardSexp")
take form next down: user.vscode("paredit.selectForwardDownSexp")
take form last down: user.vscode("paredit.selectBackwardDownSexp")
take form next up: user.vscode("paredit.selectForwardUpSexp")
take form last up: user.vscode("paredit.selectBackwardUpSexp")

list close: user.vscode("paredit.closeList")
list open: user.vscode("paredit.openList")

take list close: user.vscode("paredit.selectCloseList")
take list open: user.vscode("paredit.selectOpenList")

rangeForDefun: user.vscode("paredit.rangeForDefun")

take expand: user.vscode("paredit.sexpRangeExpansion")
take shrink: user.vscode("paredit.sexpRangeContraction")

slurp forward: user.vscode("paredit.slurpSexpForward")
slurp backward: user.vscode("paredit.slurpSexpBackward")
barf forward: user.vscode("paredit.barfSexpForward")
barf backward: user.vscode("paredit.barfSexpBackward")

form splice: user.vscode("paredit.spliceSexp")
forms split: user.vscode("paredit.splitSexp")
form join: user.vscode("paredit.joinSexp")
form raise: user.vscode("paredit.raiseSexp")
form transpose: user.vscode("paredit.transpose")

drag backward: user.vscode("paredit.dragSexprBackward")
drag forward: user.vscode("paredit.dragSexprForward")
drag backward up: user.vscode("paredit.dragSexprBackwardUp")
drag forward down: user.vscode("paredit.dragSexprForwardDown")
drag forward up: user.vscode("paredit.dragSexprForwardUp")
drag backward down: user.vscode("paredit.dragSexprBackwardDown")

form convolute: user.vscode("paredit.convolute")
kill forward: user.vscode("paredit.killSexpForward")
kill backward: user.vscode("paredit.killSexpBackward")
list kill forward: user.vscode("paredit.killListForward")
list kill backward: user.vscode("paredit.killListBackward")

splice kill forward: user.vscode("paredit.spliceSexpKillForward")
splce kill backward: user.vscode("paredit.spliceSexpKillBackward")

wrap parens: user.vscode("paredit.wrapAroundParens")
wrap square: user.vscode("paredit.wrapAroundSquare")
wrap curl: user.vscode("paredit.wrapAroundCurly")
wrap quote: user.vscode("paredit.wrapAroundQuote")

rewrap parens: user.vscode("paredit.rewrapParens")
rewrap square: user.vscode("paredit.rewrapSquare")
rewrap curl: user.vscode("paredit.rewrapCurly")
rewrap quote: user.vscode("paredit.rewrapQuote")

delete forward: user.vscode("paredit.deleteForward")
delete backward: user.vscode("paredit.deleteBackward")
force delete forward: user.vscode("paredit.forceDeleteForward")
force delete backward: user.vscode("paredit.forceDeleteBackward")


# tellAboutNewChordingKey: user.vscode("calva.tellAboutNewChordingKey")
# instrument: user.vscode("calva.debug.instrument")
# jackIn: user.vscode("calva.jackIn")
# connect: user.vscode("calva.connect")
# connectNonProjectREPL: user.vscode("calva.connectNonProjectREPL")
# toggleCLJCSession: user.vscode("calva.toggleCLJCSession")
# switchCljsBuild: user.vscode("calva.switchCljsBuild")
# selectCurrentForm: user.vscode("calva.selectCurrentForm")
# clearInlineResults: user.vscode("calva.clearInlineResults")
# evaluateSelection: user.vscode("calva.evaluateSelection")
# interruptAllEvaluations: user.vscode("calva.interruptAllEvaluations")
# evaluateCurrentTopLevelForm: user.vscode("calva.evaluateCurrentTopLevelForm")
# evaluateSelectionReplace: user.vscode("calva.evaluateSelectionReplace")
# evaluateSelectionAsComment: user.vscode("calva.evaluateSelectionAsComment")
# evaluateTopLevelFormAsComment: user.vscode("calva.evaluateTopLevelFormAsComment")
# copyLastResults: user.vscode("calva.copyLastResults")
# loadFile: user.vscode("calva.loadFile")
# togglePrettyPrint: user.vscode("calva.togglePrettyPrint")
# requireREPLUtilities: user.vscode("calva.requireREPLUtilities")
# runNamespaceTests: user.vscode("calva.runNamespaceTests")
# runAllTests: user.vscode("calva.runAllTests")
# rerunTests: user.vscode("calva.rerunTests")
# runTestUnderCursor: user.vscode("calva.runTestUnderCursor")
# loadNamespace: user.vscode("calva.loadNamespace")
# setREPLNamespace: user.vscode("calva.setREPLNamespace")
# evalCurrentFormInREPLWindow: user.vscode("calva.evalCurrentFormInREPLWindow")
# evalCurrentTopLevelFormInREPLWindow: user.vscode("calva.evalCurrentTopLevelFormInREPLWindow")
# runCustomREPLCommand: user.vscode("calva.runCustomREPLCommand")
# forwardSexp: user.vscode("paredit.forwardSexp")
# backwardSexp: user.vscode("paredit.backwardSexp")
# forwardDownSexp: user.vscode("paredit.forwardDownSexp")
# backwardDownSexp: user.vscode("paredit.backwardDownSexp")
# forwardUpSexp: user.vscode("paredit.forwardUpSexp")
# backwardUpSexp: user.vscode("paredit.backwardUpSexp")
# closeList: user.vscode("paredit.closeList")
# openList: user.vscode("paredit.openList")
# selectForwardSexp: user.vscode("paredit.selectForwardSexp")
# selectBackwardSexp: user.vscode("paredit.selectBackwardSexp")
# selectForwardDownSexp: user.vscode("paredit.selectForwardDownSexp")
# selectBackwardDownSexp: user.vscode("paredit.selectBackwardDownSexp")
# selectForwardUpSexp: user.vscode("paredit.selectForwardUpSexp")
# selectBackwardUpSexp: user.vscode("paredit.selectBackwardUpSexp")
# selectCloseList: user.vscode("paredit.selectCloseList")
# selectOpenList: user.vscode("paredit.selectOpenList")
# rangeForDefun: user.vscode("paredit.rangeForDefun")
# sexpRangeExpansion: user.vscode("paredit.sexpRangeExpansion")
# sexpRangeContraction: user.vscode("paredit.sexpRangeContraction")
# slurpSexpForward: user.vscode("paredit.slurpSexpForward")
# slurpSexpBackward: user.vscode("paredit.slurpSexpBackward")
# barfSexpForward: user.vscode("paredit.barfSexpForward")
# barfSexpBackward: user.vscode("paredit.barfSexpBackward")
# spliceSexp: user.vscode("paredit.spliceSexp")
# splitSexp: user.vscode("paredit.splitSexp")
# joinSexp: user.vscode("paredit.joinSexp")
# raiseSexp: user.vscode("paredit.raiseSexp")
# transpose: user.vscode("paredit.transpose")
# dragSexprBackward: user.vscode("paredit.dragSexprBackward")
# dragSexprForward: user.vscode("paredit.dragSexprForward")
# dragSexprBackwardUp: user.vscode("paredit.dragSexprBackwardUp")
# dragSexprForwardDown: user.vscode("paredit.dragSexprForwardDown")
# dragSexprForwardUp: user.vscode("paredit.dragSexprForwardUp")
# dragSexprBackwardDown: user.vscode("paredit.dragSexprBackwardDown")
# convolute: user.vscode("paredit.convolute")
# killSexpForward: user.vscode("paredit.killSexpForward")
# killSexpBackward: user.vscode("paredit.killSexpBackward")
# killListForward: user.vscode("paredit.killListForward")
# killListBackward: user.vscode("paredit.killListBackward")
# spliceSexpKillForward: user.vscode("paredit.spliceSexpKillForward")
# spliceSexpKillBackward: user.vscode("paredit.spliceSexpKillBackward")
# wrapAroundParens: user.vscode("paredit.wrapAroundParens")
# wrapAroundSquare: user.vscode("paredit.wrapAroundSquare")
# wrapAroundCurly: user.vscode("paredit.wrapAroundCurly")
# wrapAroundQuote: user.vscode("paredit.wrapAroundQuote")
# rewrapParens: user.vscode("paredit.rewrapParens")
# rewrapSquare: user.vscode("paredit.rewrapSquare")
# rewrapCurly: user.vscode("paredit.rewrapCurly")
# rewrapQuote: user.vscode("paredit.rewrapQuote")
# deleteForward: user.vscode("paredit.deleteForward")
# deleteBackward: user.vscode("paredit.deleteBackward")
# forceDeleteForward: user.vscode("paredit.forceDeleteForward")
# forceDeleteBackward: user.vscode("paredit.forceDeleteBackward")
# formatCurrentForm: user.vscode("calva-fmt.formatCurrentForm")
# alignCurrentForm: user.vscode("calva-fmt.alignCurrentForm")
# inferParens: user.vscode("calva-fmt.inferParens")
# tabIndent: user.vscode("calva-fmt.tabIndent")
# tabDedent: user.vscode("calva-fmt.tabDedent")
# newLine: user.vscode("calva.replWindow.newLine")
# submitPrompt: user.vscode("calva.replWindow.submitPrompt")
# cursorDown: user.vscode("calva.replWindow.cursorDown")
# cursorUp: user.vscode("calva.replWindow.cursorUp")
# historyUp: user.vscode("calva.replWindow.historyUp")
# historyDown: user.vscode("calva.replWindow.historyDown")
# newLine: user.vscode("calva.replWindow.newLine")
# submitPrompt: user.vscode("calva.replWindow.submitPrompt")
# cursorDown: user.vscode("calva.replWindow.cursorDown")
# cursorUp: user.vscode("calva.replWindow.cursorUp")
# historyUp: user.vscode("calva.replWindow.historyUp")
# historyDown: user.vscode("calva.replWindow.historyDow")
